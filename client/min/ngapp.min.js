angular.module("splus",["angularMoment","ui.bootstrap","ui.router","splus.apis","splus.teams","splus.search","splus.badges","splus.nav","splus.datastore"]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/search"),$stateProvider.state("searchstate",{url:"/search",templateUrl:"/templates/gamesearch.html",controller:"SearchController"}).state("teamstate",{url:"/teams",templateUrl:"/templates/matchview.html",controller:"TeamController"})}]),angular.module("splus.apis",[]).factory("APIs",["$http",function($http){var getGameInfo=function(playerName){return $http({method:"GET",url:"/riot/initialgamedata",params:{name:playerName}})},getSummonerChampStats=function(playerid,champid){return $http({method:"GET",url:"/riot/summonerchampionstats",params:{id:playerid,champid:champid}})},getChampStaticData=function(champNames){return $http({method:"GET",url:"/api/championstaticdata",params:{champNames:champNames}})},getSummonerLeagueData=function(summonerIds){return $http({method:"GET",url:"/riot/summonerleaguedata",params:{ids:summonerIds}})},getChampionMatchupData=function(champname1,champname2){return $http({method:"GET",url:"/api/champmatchupdatagg",params:{name1:champname1,name2:champname2}})},getDataDragonVersion=function(){return $http({method:"GET",url:"/api/ddversion"})},getSummonerRecentGames=function(id){return $http({method:"GET",url:"/riot/getsummrecentgames",params:{id:id}})};return{getGameInfo:getGameInfo,getSummonerChampStats:getSummonerChampStats,getChampStaticData:getChampStaticData,getSummonerLeagueData:getSummonerLeagueData,getChampionMatchupData:getChampionMatchupData,getDataDragonVersion:getDataDragonVersion,getSummonerRecentGames:getSummonerRecentGames}}]),angular.module("splus.teams",[]).controller("TeamController",["$rootScope","$scope","DataHandler","BuildData","Badges","APIs",function($rootScope,$scope,DataHandler,BuildData,Badges,APIs){var gameData=DataHandler.gameData;$scope.data=gameData.data,$scope.matchups=DataHandler.matchups,$scope.blueteam=DataHandler.blueteam,$scope.redteam=DataHandler.redteam,$scope.bluebans=DataHandler.bluebans,$scope.redbans=DataHandler.redbans,$scope.highestTier=DataHandler.primaryPlayer.tier,$scope.gameStarted=gameData.data.gameStartTime,$scope.primaryColor="",$rootScope.bgid="teamsbg",$scope.version="6.9.1",$scope.insertData=function(){var playerObjBuild,resp;BuildData.getSummonerChampionStats().then(function(res){return resp=res,BuildData.buildPlayerObjects()})["catch"](function(err){}).then(function(result){return playerObjBuild=result,BuildData.teamRecentGames()}).then(function(data){return BuildData.processPlayers(playerObjBuild,gameData,resp)})["catch"](function(err){}).then(function(result){return BuildData.getTierData(result),BuildData.addBanStatic()})["catch"](function(err){}).then(function(result){gameData.data.bannedChampions.forEach(function(val,ind){100===val.teamId?DataHandler.bluebans.push(val):DataHandler.redbans.push(val)});var matchupPromises=[];return gameData.data.participants.forEach(function(val,ind){4>=ind&&(DataHandler.blueteam.push(gameData.data.participants[ind]),DataHandler.redteam.push(gameData.data.participants[ind+5])),DataHandler.blueteam[ind]&&DataHandler.redteam[ind]&&(champid1=DataHandler.blueteam[ind].imageUrl,champid2=DataHandler.redteam[ind].imageUrl,champid1=champid1.replace(/\s+/g,""),champid2=champid2.replace(/\s+/g,""),matchupPromises.push(APIs.getChampionMatchupData(champid1,champid2))),Badges.createBadgeProfiles(gameData.data.participants[ind])}),Promise.all(matchupPromises)})["catch"](function(err){}).then(function(matchupArray){return BuildData.processMatchupData(matchupArray)}).then(function(data){$scope.$apply(function(){$scope.matchups=data})})["catch"](function(err){})},$scope.insertData()}]),angular.module("splus.badges",[]).factory("Badges",function(){var createBadgeProfiles=function(champ){champ.summonerChampStats&&(champ.badges=[],testGamesPlayed(champ),testMultiKills(champ),testLeagueData(champ),getKDA(champ),firstBlood(champ),smallStats(champ),checkLastTenGames(champ),checkLength(champ))},testGamesPlayed=function(obj){if(!obj.summonerChampStats.hasOwnProperty("stats"))return obj.summonerChampStats.stats={},void(obj.summonerChampStats.stats.winRate="0");var played=obj.summonerChampStats.stats.totalSessionsPlayed,pString=played+" Games Played!";"Just Call Saul"===obj.summonerName||"Jhin Main AMA"===obj.summonerName?(obj.badges.push({display:obj.championName+" GOD!",tooltip:"92348231656748 Games Played! Insanity..."}),obj.badges.push({display:"Absolute Monster ...",tooltip:" Quit now. This player is out of Control. "})):0===played?obj.badges.push({display:"First Time "+obj.championName+"!",tooltip:"Hopefully they played a normal..."}):played>1e3?obj.badges.push({display:obj.championName+" GOD!",tooltip:played+" Games Played! Insanity..."}):played>500?obj.badges.push({display:obj.championName+" Monster!",tooltip:pString}):played>200?obj.badges.push({display:obj.championName+" Beast!",tooltip:pString}):played>150?obj.badges.push({display:obj.championName+" Veteran!",tooltip:pString}):played>100?obj.badges.push({display:obj.championName+" Legend!",tooltip:"They probably like this champ... "+pString}):played>75?obj.badges.push({display:obj.championName+" Master!",tooltip:pString}):played>50?obj.badges.push({display:obj.championName+" Try Hard!",tooltip:pString}):played>25?obj.badges.push({display:obj.championName+" Disciple!",tooltip:"Its Growing on them... "+pString}):played>15?obj.badges.push({display:obj.championName+" Beginner!",tooltip:"Don't Quit your Day Job... "+pString}):played>10?obj.badges.push({display:obj.championName+" Novice!",tooltip:pString}):played>5?obj.badges.push({display:obj.championName+" Noob!",tooltip:"Keep telling yourself they probably wont feed... "+pString}):played>=1&&obj.badges.push({display:obj.championName+" TrashCan!",tooltip:"At least its not their first game! "+pString})},testMultiKills=function(array){var stats=array.summonerChampStats.stats;stats.totalPentaKills>1?array.badges.push({display:stats.totalPentaKills+" "+array.championName+" Penta Kills!",tooltip:"TotalPentaKills: "+stats.totalPentaKills}):stats.totalPentaKills>0&&array.badges.push({display:array.championName+" Penta Kill!",tooltip:"TotalPentaKills: "+stats.totalPentaKills}),stats.totalQuadraKills>1?array.badges.push({display:array.championName+" Quadra Kills!",tooltip:"TotalQuadraKills: "+stats.totalQuadraKills}):stats.totalQuadraKills>0&&array.badges.push({display:array.championName+" Quadra Kill!",tooltip:"TotalQuadraKills: "+stats.totalQuadraKills});var tdk=(stats.totalDoubleKills/stats.totalSessionsPlayed).toFixed(2);tdk>=1.75?array.badges.push({display:array.championName+" DoubleKillGod!",tooltip:"DKPG: "+tdk}):tdk>=1.35?array.badges.push({display:array.championName+" DoubleKillAssasin",tooltip:"DKPG: "+tdk}):tdk>=1?array.badges.push({display:array.championName+" DoubleKillKing!",tooltip:"DKPG: "+tdk}):tdk>=.75&&array.badges.push({display:"DoubleKillMaster!",tooltip:"DKPG: "+tdk})},testLeagueData=function(obj){if(obj.tierData){var tstats=obj.tierData,lstats=obj.tierData.leaguePoints,rankedWinRate=(obj.tierData.wins/(obj.tierData.losses+obj.tierData.wins)*100).toFixed(2);if(rankedWinRate=Number(rankedWinRate),obj.rankedOverallWinRate=rankedWinRate,99===lstats)obj.badges.push({display:lstats+" LP!",tooltip:"So close... "});else if(tstats.hasOwnProperty("miniSeries")){var l=tstats.miniSeries.losses,w=tstats.miniSeries.wins,target=tstats.miniSeries.target,series=3===target?5:3,progress=w+"W/"+l+"L of "+series;target-1===w?obj.badges.push({display:"One Victory from Promotion",tooltip:progress}):obj.badges.push({display:"Player in Series!",tooltip:progress})}else 16>100-lstats&&"master"!==tstats.tier&&"challenger"!==tstats.tier&&obj.badges.push({display:"One Win for Series!",tooltip:lstats+" LP!"});tstats.isHotStreak&&obj.badges.push({display:"Hot Streak",tooltip:"Three in a Row, Not Bad..."}),tstats.isFreshBlood&&obj.badges.push({display:"Fresh Blood",tooltip:"This player was recently Promoted"}),rankedWinRate>75?obj.badges.push({display:"Challenjour!!?!",tooltip:"This player has a Ranked Win Rate of "+rankedWinRate+"%"}):rankedWinRate>70?obj.badges.push({display:"On Another Level!",tooltip:"This player has a Ranked Win Rate of "+rankedWinRate+"%"}):rankedWinRate>60?obj.badges.push({display:"Smurf Alert!",tooltip:"This player has a Ranked Win Rate of "+rankedWinRate+"%"}):rankedWinRate>55&&obj.badges.push({display:"Solid!",tooltip:"This player has a Ranked Win Rate of "+rankedWinRate+"%"})}},getKDA=function(obj){stat=obj.summonerChampStats.stats,kda=((stat.totalAssists+stat.totalChampionKills)/stat.totalDeathsPerSession).toFixed(2),kda>10?obj.badges.push({display:"Its Over 9000!",tooltip:kda+" KDA"}):kda>8?obj.badges.push({display:"Pls... Calm Down",tooltip:kda+" KDA"}):kda>5?obj.badges.push({display:"*%@& Smurf!",tooltip:kda+" KDA"}):kda>4?obj.badges.push({display:"Legends Never Die",tooltip:kda+" KDA"}):kda>3?obj.badges.push({display:"3X!",tooltip:kda+" KDA, Obviously a Professional."}):kda>2.5&&obj.badges.push({display:"Superb!",tooltip:kda+" KDA"})},firstBlood=function(obj){stat=obj.summonerChampStats.stats,fb=stat.totalFirstBlood/stat.totalSessionsPlayed*100,fb>90?obj.badges.push({display:"Bro Pls!!?",tooltip:fb+"% FirstBloods!"}):fb>50?obj.badges.push({display:"U Cray!!?",tooltip:fb+"% FirstBloods!"}):fb>30?obj.badges.push({display:"Lee Syndrome!",tooltip:fb+"% FirstBloods!"}):fb>15?obj.badges.push({display:"Level 1 Invade Bois!",tooltip:fb+"% FirstBloods!"}):fb>10&&obj.badges.push({display:"Supremely Average!",tooltip:fb+"% FirstBloods!"})},smallStats=function(obj){stat=obj.summonerChampStats.stats;var minion=(stat.totalMinionKills/stat.totalSessionsPlayed).toFixed(0),gold=stat.totalGoldEarned/stat.totalSessionsPlayed;minion>400?obj.badges.push({display:"The Flood!",tooltip:"Average "+minion+"CS per Game"}):minion>300?obj.badges.push({display:"Enemy of the Machines!",tooltip:"Average "+minion+"CS per Game"}):minion>200&&obj.badges.push({display:"Master Minion!",tooltip:"Average "+minion+"cs per Game"}),gold>15e3&&obj.badges.push({display:"Fort Knox!",tooltip:gold.toFixed(0)+" Earned Average per Game!"})},checkLength=function(champ){for(;champ.badges.length>5;)champ.badges.shift();0===champ.badges.length&&champ.badges.push({display:"First Game "+champ.championName+"!",tooltip:"GG FF 20..."})},checkLastTenGames=function(champ){champ.recentGames.wardPlaced>40?champ.badges.push({display:"Ward's OP!!",tooltip:"Averages "+champ.recentGames.wardPlaced+" Wards per Game."}):champ.recentGames.wardPlaced>30?champ.badges.push({display:"Ward Spammer!!",tooltip:"Averages "+champ.recentGames.wardPlaced+" Wards per Game."}):champ.recentGames.wardPlaced>20?champ.badges.push({display:"Ward King!!",tooltip:"Averages "+champ.recentGames.wardPlaced+" Wards per Game."}):champ.recentGames.wardPlaced>15&&champ.badges.push({display:"Not A Bronze Warder!!",tooltip:"Averages "+champ.recentGames.wardPlaced+" Wards per Game."}),"Jhin Main AMA"===champ.summonerName&&champ.badges.push({display:"This Cheater Still Buys Wards!!",tooltip:"Averages 45749486867 Wards per Game."}),champ.recentGames.gamesWon>10?(champ.badges.push({display:"Killionaire!",tooltip:"10 in a Row... Insane!"}),champ.badges.push({display:"Invincible!",tooltip:"Won "+champ.recentGames.gamesWon+" of Last 10 Games!"})):champ.recentGames.gamesWon>9?champ.badges.push({display:"Killpocalypse!",tooltip:"Won "+champ.recentGames.gamesWon+" of Last 10 Games!"}):champ.recentGames.gamesWon>8?champ.badges.push({display:"Killtastrophe!",tooltip:"Won "+champ.recentGames.gamesWon+" of Last 10 Games!"}):champ.recentGames.gamesWon>7&&champ.badges.push({display:"Killimanjaro!",tooltip:"Won "+champ.recentGames.gamesWon+" of Last 10 Games!"}),champ.recentGames.kda>6?champ.badges.push({display:"Perfection!",tooltip:champ.recentGames.kda+" KDA Over the Last 10 Games!"}):champ.recentGames.kda>5?champ.badges.push({display:"Hail to the King!",tooltip:champ.recentGames.kda+" KDA Over the Last 10 Games!"}):champ.recentGames.kda>4?champ.badges.push({display:"Rampage!",tooltip:champ.recentGames.kda+" KDA Over the Last 10 Games!"}):champ.recentGames.kda>3&&champ.badges.push({display:"Open Season!",tooltip:champ.recentGames.kda+" KDA Over the Last 10 Games!"})};return{createBadgeProfiles:createBadgeProfiles}}),angular.module("splus.nav",[]).controller("NavController",["$scope",function($scope){}]),angular.module("splus.search",[]).controller("SearchController",["$scope","APIs","$state","$rootScope","DataHandler",function($scope,APIs,$state,$rootScope,DataHandler){$rootScope.bgid="mainbg",$scope.text="",$scope.error="",$scope.submit=function(){if(void 0!==$scope.text&&"string"==typeof $scope.text){var noSpaces=$scope.text;noSpaces=noSpaces.replace(/\s+/g,""),APIs.getGameInfo(noSpaces).then(function(resp){resp.data.hasOwnProperty("participants")?(DataHandler.primaryPlayer.name=$scope.text,DataHandler.gameData=Object.assign({},resp),$state.go("teamstate")):"string"==typeof resp.data&&($scope.error=resp.data)})["catch"](function(err){$scope.error="Summoner Not in Game!"})}}}]),angular.module("splus.datastore",[]).factory("BuildData",["DataHandler","APIs",function(DataHandler,APIs){var getTierData=function(resp){DataHandler.gameData.data.participants.forEach(function(val,index){if(resp&&resp.data[val.summonerId]){var target=resp.data[val.summonerId][0];val.tierData=target.entries[0],val.tierData.name=target.name,val.tierData.queue=target.queue,val.tierData.tier=target.tier.toLowerCase(),val.tierData.division=target.entries[0].division.toLowerCase(),val.summonerName.toLowerCase()===DataHandler.primaryPlayer.name.toLowerCase()&&(DataHandler.primaryPlayer.tier=val.tierData.tier)}else val.tierData={},val.tierData.tier="i",val.tierData.division="unranked"})},buildPlayerObjects=function(){return Promise.all(DataHandler.gameData.data.participants.map(function(val){return val?APIs.getChampStaticData(val.imageUrl):void 0}))},addBanStatic=function(){var queryString="";return DataHandler.gameData.data.bannedChampions.forEach(function(item,ind){item&&(queryString+=item.championUrl+",")}),queryString=queryString.slice(0,-1),APIs.getChampStaticData(queryString).then(function(resp){resp&&resp.data.forEach(function(val,ind){return DataHandler.gameData.data.bannedChampions[ind].role=val.role,DataHandler.gameData.data.bannedChampions[ind].staticData=val.general,val.general})})},processPlayers=function(result,gameData,res){result.forEach(function(val,ind){val&&res[ind]?(gameData.data.participants[ind].champStaticData=val.data,gameData.data.participants[ind].summonerChampStats=res[ind].data):val.data&&(gameData.data.participants[ind].champStaticData=val.data)});var query=gameData.data.idArray.toString();return APIs.getSummonerLeagueData(query)},processMatchupData=function(matchupArray){return new Promise(function(resolve,reject){if(!matchupArray)return void reject(matchupArray);for(var mHold=[],rolePos=["Jungle","ADC","Top","Support","Middle"],i=0;i<matchupArray.length;++i)matchupArray[i].data[0]?(mHold.push(matchupArray[i].data[0]),mHold[i].versus=DataHandler.blueteam[i].championName+" vs "+DataHandler.redteam[i].championName,mHold[i].favors=matchupArray[i].data[0].winRate<50?"Favors "+DataHandler.redteam[i].championName:"Favors "+DataHandler.blueteam[i].championName,mHold[i].games+=" Games Analyzed",mHold[i].winRate+=" %",mHold[i].role=rolePos[i]):(mHold[i]={error:"Matchup Not Found!"},mHold[i].role=rolePos[i]);resolve(mHold)})},getSummonerChampionStats=function(){var array=[];return DataHandler.gameData.data.participants.forEach(function(val,index){val&&array.push(APIs.getSummonerChampStats(val.summonerId,val.championId))}),Promise.all(array)},teamRecentGames=function(){return Promise.all(DataHandler.gameData.data.participants.map(function(val){return APIs.getSummonerRecentGames(val.summonerId).then(function(data){val.recentGames=data.data})}))};return{buildPlayerObjects:buildPlayerObjects,getTierData:getTierData,addBanStatic:addBanStatic,processPlayers:processPlayers,getSummonerChampionStats:getSummonerChampionStats,processMatchupData:processMatchupData,teamRecentGames:teamRecentGames}}]).service("DataHandler",function(){this.gameData={},this.matchups=[],this.blueteam=[],this.redteam=[],this.bluebans=[],this.redbans=[],this.primaryPlayer={name:void 0,tier:void 0}});